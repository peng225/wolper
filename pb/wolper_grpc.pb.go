// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/wolper.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WolperServiceClient is the client API for WolperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WolperServiceClient interface {
	Query(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type wolperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWolperServiceClient(cc grpc.ClientConnInterface) WolperServiceClient {
	return &wolperServiceClient{cc}
}

func (c *wolperServiceClient) Query(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/wolper.WolperService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WolperServiceServer is the server API for WolperService service.
// All implementations should embed UnimplementedWolperServiceServer
// for forward compatibility
type WolperServiceServer interface {
	Query(context.Context, *SearchRequest) (*SearchResponse, error)
}

// UnimplementedWolperServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWolperServiceServer struct {
}

func (UnimplementedWolperServiceServer) Query(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}

// UnsafeWolperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WolperServiceServer will
// result in compilation errors.
type UnsafeWolperServiceServer interface {
	mustEmbedUnimplementedWolperServiceServer()
}

func RegisterWolperServiceServer(s grpc.ServiceRegistrar, srv WolperServiceServer) {
	s.RegisterService(&WolperService_ServiceDesc, srv)
}

func _WolperService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WolperServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wolper.WolperService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WolperServiceServer).Query(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WolperService_ServiceDesc is the grpc.ServiceDesc for WolperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WolperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wolper.WolperService",
	HandlerType: (*WolperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _WolperService_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/wolper.proto",
}
